# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2018-05-18 13:42
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='文章标题', max_length=70)),
                ('body', models.TextField(help_text='文章内容')),
                ('created_time', models.DateTimeField(help_text='文章创建时间')),
                ('modified_time', models.DateTimeField(help_text='文章最后一次修改时间')),
                ('excerpt', models.CharField(blank=True, help_text='文章摘要,可以不写', max_length=200)),
                ('views', models.PositiveIntegerField(default=0, help_text='文章浏览量')),
                ('author', models.ForeignKey(help_text='使用auth模块', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='文章的分类', on_delete=django.db.models.deletion.CASCADE, to='blog.Category')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='文章的标签,可以为空', to='blog.Tag'),
        ),
    ]
